# Docker
# docker build . -t users-barfinder360
# Docker run users-barfinder360
# docker run -d -p 5001:5001 --name users-barfinder360 users-barfinder360   // este comando es para correr el contenedor de docker

# este comando es para correr el contenedor de docker con el init
# docker run -p 5001:5001 --init --rm --name users-barfinder360 users-barfinder360 

# docker-compose
# docker-compose up --build

# este codigo es para crear la imagen de docker y -t es para darle un nombre a la imagen
# docker build . -t users-micro

# kubectl apply -f users-micro-pod.yaml
#kubectl get pods
# kubectl describe pods users
# kubectl delete pod users
# minikube docker-env


#################### Pasos para crear la imagen de docker y subirlo a kubernetes

#  Iniciar minikube
    minikube start driver=docker


# 1  =  # utilizar el entorno de docker de minikube para crear la imagen
         # minikube docker-env
         #  RUN eL comando que te da el minikube docker-env

# 2  = # crear la imagen de docker
         # docker build . -t users-micro

# 3  = # aplicar el archivo de configuracion de kubernetes
            # kubectl apply -f users-micro-pod.yaml

# 4  = # ver los pods 
            # kubectl get pods

# 5  = # ver la descripcion del pod
            # kubectl describe pods users

# 6  = # borrar el pod 
            # kubectl delete pod users

# abril el minikube dashboard
    # minikube dashboard


#Comando para ver los logs de un pod
    # kubectl logs users

#Comando para ver los logs de un pod en tiempo real
    # kubectl logs -f users
    # kubectl logs -f users --tail 20
    # kubectl logs users -c users     # este comando es para ver los logs de un contenedor especifico

#comando para ver la ip del pod
    # kubectl get pods -o wide

#comando para ver los servicios
    # kubectl get services
    
#  iniciar un proxy a un servicio de api i 
   ##### kubectl port-forward users 5001:5001

    # kubectl port-forward pods/users 5001:5001  # este comando es para hacer un port-forward a un pod especifico

    # este comando es para hacer un port-forward a un pod especifico y un labes especifico
    # kubectl port-forward pods -l app=users 5001:5001
    # kubectl port-forward $(kubectl get pods -l v1=v2 -o jsonpath='{.items[0].metadata.name}') 5001:5001      # este comando es para hacer un port-forward a un pod especifico y un labes especifico


########  Tiquetar un pods

    # kubectl label pod users version=v1

#  Ver los pods con una etiqueta
    # kubectl get pods --show-labels

#  Ver los pods con una etiqueta especifica
    # kubectl get pods -l version=v1

#  Borrar la etiqueta de un pod 
    # kubectl label pod users version-

#ver terminal de un pod de kubernetes 
    #  kubectl exec -it users -c users -- bash

# configurar el autoescalamiento de un pod
    # kubectl autoscale deployment users --min=1 --max=10 --cpu-percent=80

# ver el autoescalamiento de un pod
    # kubectl get hpa




    #####################  CREAR  UN DEPLOYMENT Y SERVIC IO DE KUBERNETES ####################

    # crear deployment 
        # kubectl create -f users-micro-deployment.yaml

    # creamos nuestro archivo en formato json o yaml, por ejemplo us.
          # kubectl apply -f users-micro-deployment.yaml

    # ver los deployments
            # kubectl get deployments

    # ver los describe   del deployment
            # kubectl describe deployments users

    # Eliminar  el deployment
            # kubectl delete deployment users

    # ver los replicasets
            # kubectl get replicasets

    # ver las peticiones de recurs
              # kubectl get pods -o wide
              
              # kubectl get services -o wide

   # ver los labels 
        # kubectl get pods --show-labels

    # escalar los deplymest pods
        # kubectl scale deployment users --replicas=3

    # ver los servicios
        # kubectl get services

    # expose  el servicio para que pueda ser accedido desde afuera
        # kubectl expose deployment users

        # kubectl expose deployment users --type="LoadBalancer" --port 8      


   
