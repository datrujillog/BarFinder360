// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


//modelo de usuario
model User {
  id              Int      @id @default(autoincrement())
  name            String
  lastName        String
  usuario         String
  email           String
  password        String
  phone           String
  NameBusiness    String
  tipoNegocio     String
  rol             Role       @default(VENDEDOR)
  state           EstadoUser @default(PENDIENTE)
  shift           Shift?   // Relación uno a uno con Turno
  mesas           UserMesa[]   // Relación muchos a muchos con Mesa
}

//modelo de turno
model Shift {
  id              Int       @id @default(autoincrement())
  markTime        DateTime
  open            DateTime
  close           DateTime
  state           stateShift 
  user            User? @relation(fields: [userId], references: [id])  // Relación uno a uno con User
  userId          Int?    @unique // Campo único para la relación uno a uno con User
}

//modelo de pedido

model Order {
  id              Int               @id @default(autoincrement())
  date            DateTime
  amount          Int
  total           Float
  state           stateOrder
  product         OrderProduct[]  // Relación muchos a muchos con Producto
  mesa            Mesa @relation(fields: [mesaId], references: [id])  // Relación uno a uno con Mesa
  mesaId          Int @unique  // Campo único para la relación uno a uno con Mesa
 
}

model Mesa {
  id       Int      @id @default(autoincrement())
  fecha    DateTime
  unidad   Int
  producto String
  precio   Float
  promo    String
  total    Float
  estado   String
  order   Order?   // Relación uno a uno con Pedido
  users    UserMesa[]    // Relación muchos a muchos con User
  productos MesaProduct[]  // Relación muchos a muchos con Producto
}

model UserMesa {  //tabla intermedia para la relación muchos a muchos entre User y Mesa
  id       Int      @id @default(autoincrement())
  users     User     @relation(fields: [userId], references: [id])
  userId   Int
  mesas     Mesa     @relation(fields: [mesaId], references: [id])
  mesaId   Int
  
  @@unique([userId, mesaId]) // Asegurar unicidad en la relación
}

model Product {
  id                Int       @id @default(autoincrement())
  name              String
  codigo            String
  precio            Float
  tiempoPreparacion String
  categoria         String
  descripcion       String
  imagen            String
  promocion         String
  estado            String
  order             OrderProduct[] // Relación muchos a muchos con Pedido
  mesas             MesaProduct[]   // Relación muchos a muchos con Mesa
  promotion       Promotion @relation(fields: [promocionId], references: [id])  // Relación uno a muchos con Promocion
  promocionId       Int
  categorias        Category @relation(fields: [categoriaId], references: [id])  // Relación uno a muchos con Category
  categoriaId       Int
}

//tabla intermedia de muchos de productos y mesas 
model MesaProduct {
  id         Int      @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  mesa       Mesa     @relation(fields: [mesaId], references: [id])
  mesaId     Int

  @@unique([productId, mesaId]) // Asegurar unicidad en la relación
}
model OrderProduct {// Tabla intermedia para la relación muchos a muchos entre Producto y Pedido
  id         Int      @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int

  @@unique([productId, orderId]) // Asegurar unicidad en la relación
}

//modelo de promocion
model Promotion {
  id       Int      @id @default(autoincrement())
  descripcion   String
  tipo   String
  fechaInicio   DateTime
  fechaFin   DateTime
  estado   String
  product   Product[]  // Relación uno a muchos con Producto
}

//modelo de categoria
model Category {
  id       Int      @id @default(autoincrement())
  nombre   String
  descripcion   String
  estado   String
  product   Product[]  // Relación uno a muchos con Producto

}



//enum  para los roles de usuario
enum Role {
  VENDEDOR
  CAJA
  COODINADOR
  ADMIN
}

//enum para los estados de usuario
enum EstadoUser {
  ACTIVO
  INACTIVO
  PENDIENTE
}

//enum para los estados de turno
enum stateShift {
  ACTIVO
  INACTIVO
  PENDIENTE
}


enum stateOrder {
  PENDIENTE           //La orden de pago ha sido creada pero aún no se ha procesado.
  COMPLETADA          //La orden de pago se ha procesado correctamente y se ha completado.
  CANCELADO           //La orden de pago ha sido cancelada.
  REEMBOLSADO         //La orden de pago ha sido reembolsada.
  EN_PROCESO          //La orden de pago ha sido procesada y se encuentra en proceso de entrega.
  DISPUTADO           //La orden de pago está siendo disputada debido a algún problema o reclamación.
  FALLIDA             //a orden de pago no se pudo procesar correctamente y ha fallado.
  PAGADO             //La orden de pago ha sido pagada.

}