// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Rol {
  id              Int      @id @default(autoincrement())
  name            String   
  user            User[]   // Relación uno a muchos con User
  accionHasModule AccionHasModule[]  // Relación uno a muchos con AccionHasModule
}



//modelo de usuario
model User {
  id              Int      @id @default(autoincrement())
  name            String
  lastName        String
  usuario         String
  email           String
  password        String
  phone           String
  NameBusiness    String
  tipoNegocio     String
  state           EstadoUser         @default(ACTIVO)
  shift           Shift?             // Relación uno a uno con Turno
  mesas           UserMesa[]         // Relación muchos a muchos con Mesa
  roles           Rol?               @relation(fields: [rolesId], references: [id])  // Relación uno a uno con Rol, ahora opcional
  rolesId         Int?               
}


//modelo de turno
model Shift {
  id              Int                  @id @default(autoincrement())
  markTime        DateTime
  open            DateTime
  close           DateTime
  state           stateShift
  user            User?               @relation(fields: [userId], references: [id])  // Relación uno a uno con User
  userId          Int?                @unique // Campo único para la relación uno a uno con User
}

//modelo de pedido

model Order {
  id              Int                  @id @default(autoincrement())
  date            DateTime
  amount          Int
  total           Float
  state           stateOrder
  product         OrderProduct[]  // Relación muchos a muchos con Producto
  mesa            Mesa?                 @relation(fields: [mesaId], references: [id])  // Relación uno a muchos con Mesa
  mesaId          Int?                   @unique  // Campo único para la relación uno a uno con Mesa
 
}

model Mesa {
  id              Int      @id @default(autoincrement())
  date            DateTime
  name            String
  description     String
  state           stateMesa
  order           Order?   // Relación uno a muchos con order
  users           UserMesa[]    // Relación muchos a muchos con User
  products        MesaProduct[]  // Relación muchos a muchos con Producto
}

model UserMesa {  //tabla intermedia para la relación muchos a muchos entre User y Mesa
  id       Int      @id @default(autoincrement())
  users     User     @relation(fields: [userId], references: [id])
  userId   Int
  mesas     Mesa     @relation(fields: [mesaId], references: [id])
  mesaId   Int
  
  @@unique([userId, mesaId]) // Asegurar unicidad en la relación
}

model Product {
  id                Int       @id @default(autoincrement())
  name              String
  codigo            String
  price             Float
  timePreparation   String
  description       String
  image             String
  state             stateProducto
  order             OrderProduct[] // Relación muchos a muchos con Pedido
  mesas             MesaProduct[]   // Relación muchos a muchos con Mesa
  promotion         Promotion         @relation(fields: [promotionId], references: [id])  // Relación uno a muchos con Promocion
  promotionId       Int
  Category          Category          @relation(fields: [categoryId], references: [id])  // Relación uno a muchos con Category
  categoryId        Int
}

//tabla intermedia de muchos de productos y mesas 
model MesaProduct {
  id                Int              @id @default(autoincrement())
  product           Product          @relation(fields: [productId], references: [id])
  productId         Int
  mesa              Mesa             @relation(fields: [mesaId], references: [id])
  mesaId            Int 

  @@unique([productId, mesaId]) // Asegurar unicidad en la relación
}
model OrderProduct {// Tabla intermedia para la relación muchos a muchos entre Producto y Pedido
  id         Int                    @id @default(autoincrement())
  product   Product                 @relation(fields: [productId], references: [id])
  productId Int
  order     Order                   @relation(fields: [orderId], references: [id])
  orderId   Int

  @@unique([productId, orderId]) // Asegurar unicidad en la relación
}

//modelo de promocion
model Promotion {
  id             Int               @id @default(autoincrement())
  description    String
  type           String
  startDate      DateTime
  endDate        DateTime
  state          statePromotion
  product        Product[]  // Relación uno a muchos con Producto
}

//modelo de categoria
model Category {
  id              Int                     @id @default(autoincrement())
  name            String
  description     String
  statate         stateCategory
  product         Product[]  // Relación uno a muchos con Producto

}



//mode Modulo 
model Modulo {
  id              Int      @id @default(autoincrement())
  name            String
  accionHasModule AccionHasModule[]  // Relación uno a muchos con AccionHasModule
   // user            User[] 
}

//model de aciones
model Accion {
  id              Int      @id @default(autoincrement())
  name            String
  accionHasModule AccionHasModule[]  // Relación uno a muchos con AccionHasModule
}

//tabla intermedia
model AccionHasModule {
  id              Int      @id @default(autoincrement())
  accion          Accion   @relation(fields: [accionId], references: [id])
  accionId        Int 
  modulo          Modulo   @relation(fields: [moduloId], references: [id])
  moduloId        Int
  rol             Rol      @relation(fields: [rolId], references: [id])
  rolId           Int
}






















//enum para los estados de usuario
enum EstadoUser {
  ACTIVO
  INACTIVO
  PENDIENTE
}

//enum para los estados de turno
enum stateShift {
  ACTIVO
  INACTIVO
  PENDIENTE
}


enum stateOrder {
  PENDIENTE           //La orden de pago ha sido creada pero aún no se ha procesado.
  COMPLETADA          //La orden de pago se ha procesado correctamente y se ha completado.
  CANCELADO           //La orden de pago ha sido cancelada.
  REEMBOLSADO         //La orden de pago ha sido reembolsada.
  EN_PROCESO          //La orden de pago ha sido procesada y se encuentra en proceso de entrega.
  DISPUTADO           //La orden de pago está siendo disputada debido a algún problema o reclamación.
  FALLIDA             //a orden de pago no se pudo procesar correctamente y ha fallado.
  PAGADO             //La orden de pago ha sido pagada.

}

enum stateMesa {
  ACTIVO
  INACTIVO
}

// enum stateMesa {
//   LIBRE
//   OCUPADA
//   RESERVADA
//   CERRADA
// }

enum stateProducto {
  ACTIVO
  INACTIVO
}

enum statePromotion {
  ACTIVO
  INACTIVO
}

enum stateCategory {
  ACTIVO
  INACTIVO
}
